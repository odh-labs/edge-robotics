#+TITLE: Edge Robotics AI/ML Demo Environment Setup
#+EMAIL: jablair@redhat.com
#+AUTHOR: James Blair
#+DATE: <2023-09-15 Fri 14:00>


This document captures the process for setting up a new Red Hat ANZ edge robotics [[https://www.redhat.com/en/openshift-4][OpenShift 4]] "hub" cluster along with a corresponding "edge" cluster.

The hub cluster is where:

- Models are trained using [[https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science][Red Hat OpenShift Data Science]].
- Models are containerised using [[https://cloud.redhat.com/blog/introducing-openshift-pipelins][Red Hat OpenShift Pipelines]].

The edge cluster is where:

- Models will run (pushed from ArgoCD in the hub).

The diagram below outlines the general flow for edge robotics demo environments:

[[../images/model-flow-diagram.svg]]


* Pre-requisites

This process assumes you already have two OpenShift 4.12+ clusters running, and that you have cluster admin privileges on both.

The steps below also rely on the ~oc~ openshift cli so ensure you have that installed as well. If you don't have this installed already follow [[https://docs.openshift.com/container-platform/4.12/cli_reference/openshift_cli/getting-started-cli.html][this install documentation]].


* Stage 1 - Containerise model on hub cluster


** Deploying openshift gitops

The goal of this setup process is to be as declarative as possible. With this in mind our first step on the new hub cluster will be to install the [[https://www.redhat.com/en/technologies/cloud-computing/openshift/gitops][OpenShift Gitops]] operator and create an instance of [[https://argoproj.github.io/cd/][ArgoCD]] via the operator, so that all remaining steps can be performed in a GitOps manner.


*** Login to the hub cluster

Before we can run any of the following commands, we need to ensure we are logged in. Run the following to do so, updating the placeholder values:

#+begin_src bash :results silent
oc login --token=<token> \
         --server=<cluster> \
         --kubeconfig ~/.kube/edge-robotics-hub \
         --insecure-skip-tls-verify=true
#+end_src

*** Install openshift gitops operator

We can programatically install the openshift gitops operator on the hub cluster in a declaritive way by creating a ~Subscription~ kubernetes custom resource to subscribe a given namespace to the Operator.

#+begin_src bash :results silent
cat << EOF | oc --kubeconfig ~/.kube/edge-robotics-hub apply --filename -
apiVersion: operators.coreos.com/v1alpha1
kind: Subscription
metadata:
  name: openshift-gitops-operator
  namespace: openshift-operators
spec:
  channel: latest
  installPlanApproval: Automatic
  name: openshift-gitops-operator
  source: redhat-operators
  sourceNamespace: openshift-marketplace
  config:
    env:
    - name: ARGOCD_CLUSTER_CONFIG_NAMESPACES
      value: openshift-gitops
EOF
#+end_src


*** Create openshift gitops instance

Once the operator is installed we can apply our ~ArgoCD~ custom resource definition. This will be picked up by the operator and an updated argocd instance will be deployed based on the specification we provided.

#+begin_src bash :results silent
cat << EOF | oc --kubeconfig ~/.kube/edge-robotics-hub apply --filename -
apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  kustomizeBuildOptions: --enable-helm --enable-alpha-plugins
  rbac:
    defaultPolicy: role:admin
    scopes: '[groups]'
  resourceExclusions: |
    - kinds:
        - TaskRun
  server:
    insecure: true
    route:
      enabled: true
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
  sso:
    dex:
      openShiftOAuth: true
    provider: dex
EOF
#+end_src


Once the argocd instance has started we can access the web interface via the ~Route~ automatically created by the Operator.

#+begin_src bash :results silent
xdg-open "https://$(oc --kubeconfig ~/.kube/edge-robotics-hub --namespace openshift-gitops get route openshift-gitops-server --output jsonpath='{.spec.host}')"
#+end_src

** Ensure required namespaces exist

The code blocks below require the ~edge-robotics~ namespace to exist on our cluster and be managed by ~argocd~. Let's complete that now:

#+begin_src bash :results silent
oc --kubeconfig ~/.kube/edge-robotics-hub new-project "${namespace}"
oc --kubeconfig ~/.kube/edge-robotics-hub label --overwrite namespace "${namespace}" argocd.argoproj.io/managed-by=openshift-gitops
#+end_src

** Create tekton pipeline quay.io secret

Our model containerisation pipeline on the hub cluster relies on a secret containing credentials to authenticate and push an image to ~quay.io~.

Run the snippet below to create a secret for your quay.io credentials, so we have everything in place to kick off our pipeline. You can either set an environment variable for the ~QUAY_USER~ and ~QUAY_PASS~ values, or update the code block placeholder values below.

#+begin_src bash :results silent
cat << EOF | oc --kubeconfig ~/.kube/edge-robotics-hub apply --filename -
apiVersion: v1
stringData:
  username: $(echo ${QUAY_USER:-placeholder})
  password: $(echo ${QUAY_PASS:-placeholder})
kind: Secret
metadata:
  name: push-secret
  namespace: edge-robotics
  annotations:
    tekton.dev/docker-0: https://quay.io
type: kubernetes.io/basic-auth
EOF
#+end_src


** Create tekton pipelines with gitops

From here, with openshift gitops running in our hub cluster, all we need to do is apply the argocd ~ApplicationSet~ custom resource shown below, which points to a git repository containing our remaining manifests.

This ~ApplicationSet~ resource will be picked up by ArgoCD and periodically synchronised to our cluster to create an ~Application~ for the openshift pipelines operator as well as the actual pipeline which uses that operator.

#+begin_src bash :results silent
cat << EOF | oc --kubeconfig ~/.kube/edge-robotics-hub apply --filename -
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: edge-robotics-pipeline
  namespace: openshift-gitops
spec:
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - git:
        repoURL: https://github.com/jmhbnz/edge-robotics.git
        revision: main
        directories:
          - path: deployment/gitops*
  template:
    metadata:
      name: '{{.path.basename}}'
    spec:
      project: "default"
      source:
        repoURL: https://github.com/jmhbnz/edge-robotics.git
        targetRevision: main
        path: '{{.path.path}}'
      destination:
        server: https://kubernetes.default.svc
        namespace: edge-robotics
      syncPolicy:
        automated:
          prune: true
        syncOptions:
          - CreateNamespace=true
EOF
#+end_src


* Stage 2 - Deploy model to edge cluster

We now have a model built into a container image and pushed to ~quay.io~.  Let's deploy this out to our edge cluster via openshift pipelines and argocd.

Run the pipeline below to register our remote edge device as a cluster our argocd instance can manage. Once this happens argocd will automatically sync the edge device deployment to that cluster based on the cluster name.

#+begin_src bash :results none
cat << EOF | oc --kubeconfig ~/.kube/edge-robotics-hub create --filename -
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: cluster-oboarding-pipelinerun-
  namespace: openshift-gitops
spec:
  params:
    - name: EDGE_DEVICE_KUBERNETES_API
      value: placeholder
    - name: EDGE_DEVICE_USER
      value: admin
    -name: EDGE_DEVICE_PASSWORD
      value: password
  pipelineRef:
    name: model-pipeline
  serviceAccountName: pipeline
EOF
#+end_src


Congratulations! After following through the process up to this point, following a brief wait for ArgoCD to sync you should now see an edge robotics ~namespace~ and ~pod~ deployed to the remote edge device cluster ðŸŽ‰ðŸš€


* Teardown

Finished with the demo environment and want to remove all edge robotics content from the hub cluster? No problem, just run the section below:

#+begin_src bash :results silent
# Delete applicationset
oc --kubeconfig ~/.kube/edge-robotics-hub --namespace openshift-gitops delete applicationset edge-robotics-pipeline

# Delete the project
oc --kubeconfig ~/.kube/edge-robotics-hub delete --ignore-not-found=true project edge-robotics
#+end_src

